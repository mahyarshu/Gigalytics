update spotify_track_details set artist_mbid = '9eae7149-852d-49e9-8c44-e5469fed242b'
where track_spotify_id in (select spotify_id from spotify_top_200_weekly
where artist = 'Dappy'); --'57XM1QkO2zyCgcybsYd9Cj';

update spotify_top_200_weekly set  artist = 'RussMB'
where artist in ('RussMB', 'Russ Millions');

update spotify_track_details set  artist_fychart_name = 'RussMB'
where artist_mbid = 'b2252b38-dbbc-47dc-b7c7-1dfc3cd2dd59';

--**************************************
-- Derive Artist Dimension Table
--**************************************
drop table if exists tbl_unique_artist_name cascade;
--create or replace view vw_unique_artist as
create table tbl_unique_artist_name as
select count(week_position), artist
from spotify_top_200_weekly stw 
group by artist; -- 554 unique artist;

drop table if exists tbl_unique_artist_mbid cascade;
create table tbl_unique_artist_mbid as 
select count(artist_mbid), artist_spotify_id , artist_mbid,  artist_name 
from spotify_track_details 
where artist_mbid <> '' --although this can be changed to artist_spotify_id, we may not be able to use
						--the same when joining this star schema with the songkick schema
group by artist_spotify_id , artist_mbid,  artist_name;
--581 unique mbids (this may be due to the fact some tracks are collabos, 
--although only the name of the top artist appears in the chart 

--investigating using artist_spotify_id
drop table if exists tbl_unique_artist_spotify_id cascade;
create table tbl_unique_artist_spotify_id as
select count(artist_spotify_id),  artist_spotify_id, artist_mbid, artist_fychart_name, ROUND(AVG(track_popularity)) as artist_popularity
from spotify_track_details std 
where lower(artist_name) = lower(artist_fychart_name )
group by artist_spotify_id, artist_mbid, artist_fychart_name 
order by 1 desc;
--554 unique artist_spotify_id (this is due to the fact that some tracks are collabos, 
--although only the name of the top artist appears in the chart

/*
-- join the two dataset to get list of unique artists using mbid
drop table if exists dim_mbArtist cascade;
create table dim_mbArtist as 
select b.artist_mbid, b.artist_spotify_id, a.artist
from tbl_unique_artist_name a 
left outer join tbl_unique_artist_mbid b
on lower(trim(a.artist)) = lower(trim(b.artist_name))
where b.artist_mbid is not null ;
--405 unique artist with mbid from a total of 554 (149 without mbid)
*/

-- join the two dataset to get list of unique artists usng spotify_id
drop table if exists dim_spotifyArtist cascade;
create table dim_spotifyArtist as
select b.artist_spotify_id, b.artist_mbid, a.artist, b.artist_popularity
from tbl_unique_artist_name a 
left outer join tbl_unique_artist_spotify_id b
on lower(trim(a.artist)) = lower(trim(b.artist_fychart_name))
where b.artist_fychart_name is not null
and b.artist_mbid is not null;
--405 unique artist with mbid from a total of 554 (149 without mbid)


ALTER TABLE dim_spotifyartist ADD CONSTRAINT dim_spotifyartist_pk PRIMARY KEY (artist_mbid);

/*
select * from dim_spotifyartist ds where ds.artist_mbid = 'b2252b38-dbbc-47dc-b7c7-1dfc3cd2dd59'

select * from spotify_track_details std where std.artist_mbid = 'b2252b38-dbbc-47dc-b7c7-1dfc3cd2dd59'

update spotify_track_details set artist_mbid = '9eae7149-852d-49e9-8c44-e5469fed242b'
where track_spotify_id = '57XM1QkO2zyCgcybsYd9Cj'

select * from spotify_track_details std where track_spotify_id = '57XM1QkO2zyCgcybsYd9Cj'

select 

update spotify_track_details set  artist_fychart_name = 'RussMB'
--select * from spotify_top_200_weekly stw 
where artist_mbid = 'b2252b38-dbbc-47dc-b7c7-1dfc3cd2dd59'
*/



--**************************************
-- Derive Location Dimension Table
--**************************************
drop table if exists dim_location cascade;
CREATE TABLE dim_location (
	region text NULL,
	region_id int2 NOT NULL GENERATED BY DEFAULT AS identity
);

insert into dim_location(region) select distinct region from spotify_top_200_weekly;

ALTER TABLE dim_location ADD CONSTRAINT dim_location_pk PRIMARY KEY (region_id);



--**************************************
-- Derive Time Dimension Table
--**************************************
drop table if exists dim_Time cascade;

create table dim_Time as

--SELECT distinct to_char(start_date, 'yyyymmiw') as time_id, 
SELECT distinct to_char(start_date, 'yyyymm') as time_id, 
to_char(start_date, 'yyyy') as year,
to_char(start_date, 'mm') as month,
--to_char(start_date, 'iw') as week, 
to_char(start_date, 'Month') as month_name
--,start_date as chart_date
FROM spotify_top_200_weekly
order by 1;

ALTER TABLE dim_time ADD CONSTRAINT dim_time_pk PRIMARY KEY (time_id);


--**************************************
-- Derive Track Dimension Table
--**************************************
drop table if exists dim_Tracks cascade;
create table dim_Tracks as
select distinct spotify_id, track_name, std.artist_spotify_id, std.artist_mbid, 
std.track_duration_ms, std.track_url, std.track_popularity
from spotify_top_200_weekly stw, spotify_track_details std 
where (stw.spotify_id = std.track_spotify_id and std.artist_fychart_name = std.artist_name and std.artist_mbid is not null);

ALTER TABLE dim_tracks ADD CONSTRAINT dim_tracks_pk PRIMARY KEY (spotify_id);

--ALTER TABLE dim_tracks ADD CONSTRAINT dim_tracks_fk FOREIGN KEY (artist_spotify_id) REFERENCES dim_spotifyartist(artist_spotify_id);

ALTER TABLE dim_tracks ADD CONSTRAINT dim_tracks_fk FOREIGN KEY (artist_mbid) REFERENCES dim_spotifyartist(artist_mbid);



--**********************************************
-- Derive streamcount_popularity fact Table
--**********************************************
drop table if exists fct_streamcount_popularity cascade;
create table fct_streamcount_popularity as
select a.region_id, c.time_id, b.artist_mbid , sum(d.streams) as sumofstreams, min(d.week_position) peak_position,
--avg(b.artist_popularity) as avg_popularity, 
count(d.week_position) as tracks_in_top200
from dim_location a, 
	dim_spotifyartist b, 
	dim_time c, 
	spotify_top_200_weekly d 
where c.time_id = to_char(d.start_date, 'yyyy') || to_char(d.start_date, 'mm')-- || to_char(d.start_date, 'iw')
		 and d.region = a.region and d.artist = b.artist
		 and d.artist = b.artist 
group by a.region_id, c.time_id, b.artist_mbid
order by  a.region_id, c.time_id desc,sumofstreams desc, tracks_in_top200 desc;

ALTER TABLE fct_streamcount_popularity ADD CONSTRAINT fct_streamcount_popularity_pk PRIMARY KEY (region_id,time_id,artist_mbid);
ALTER TABLE public.fct_streamcount_popularity ADD CONSTRAINT fct_streamcount_popularity_fk FOREIGN KEY (region_id) REFERENCES public.dim_location(region_id);
ALTER TABLE public.fct_streamcount_popularity ADD CONSTRAINT fct_streamcount_popularity_fk_2 FOREIGN KEY (artist_mbid) REFERENCES public.dim_spotifyartist(artist_mbid);
ALTER TABLE public.fct_streamcount_popularity ADD CONSTRAINT fct_streamcount_popularity_fk_1 FOREIGN KEY (time_id) REFERENCES public.dim_time(time_id);


/*
select * from spotify_top_200_weekly stw, dim_spotifyartist ds 
where stw.artist = ds.artist 
and ds.artist_spotify_id = '1Xyo4u8uXC1ZmMpatF05PJ'
and stw.start_date between '2020-02-21' and '2020-02-29'
and stw.region = 'gb'
order by 1
*/